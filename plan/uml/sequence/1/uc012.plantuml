@startuml
title 商品修正
actor user
participant UpdateProductController as Controller
participant ProductForm as Form
participant ProductCategoryService as Service1
participant ProductService as Service
participant ProductConverter as Helper
participant ProductCategoryRepository as Repository
participant ProductRepository as Repository1
participant StockRepository as Repository2
database DB

==入力==
user -> Controller++:input()
Controller -> Service++:getProductByProductId(productId:Integer)
Service -> Repository1++:selectByProductId(productId:Integer)
Repository1 -> DB++:SQL(SELECT)
Repository1 <-- DB--:Product
Service <-- Repository1--:Product
Controller <-- Service--:Product
Controller -> Service1++:selectAll()
Service1 -> Repository++:selectAll()
Repository -> DB++:SQL(SELECT)
Repository <-- DB--:List<FormCategory>
Service1 <-- Repository--:List<FormCategory>
Controller <-- Service1--:List<FormCategory>
user <-- Controller--:商品修正入力画面
==確認==
user -> Controller++:confirm()
Controller -> Form++:商品情報セット\n new ProductForm()
Controller <-- Form--:ProductForm
Controller -> Controller:バリデート
user <-- Controller--:商品修正確認画面
==完了==
user -> Controller++:execute()
Controller -> Service++:productUpdate(Productform:ProductForm)
Service -> Helper++:convertToEntity(FormProduct)
Service <-- Helper--:Product
Service -> Repository1++:update(product:Product)
Repository1 -> DB++:SQL(UPDATE)
Repository1 <-- DB--:void
Service <-- Repository1--:void
Service -> Repository2++:update\n(prodId:Integer,quantity:Integer)
Repository2 -> DB++:SQL(UPDATE)
Repository2 <-- DB--:void
Service <-- Repository2--:void
Controller <-- Service--:void
user <-- Controller--:リダイレクト
user --> Controller++:complete()
Controller -> Controller:セッション破棄
user <-- Controller--:商品修正完了画面

@enduml