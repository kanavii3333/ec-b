<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 

<mapper namespace="com.fullness.ec.repository.ProductRepository">
<resultMap type="Product" id="prodResult">
        <id property="productId" column="productId" />
        <result property="productName" column="productName" />
        <result property="price" column="price" />
        <result property="imageUrl" column="imageUrl" />
        <association property="productCategory" javaType="ProductCategory">
            <id property="productCategoryId" column="productCategoryId" />
            <result property="productCategoryName" column="productCategoryName" />
        </association>
        <association property="productStock" javaType="ProductStock">
            <id property="productStockId" column="productStockId" />
            <result property="quantity" column="quantity" />
        </association>
    </resultMap>
    
    <select id="selectAll" resultMap="prodResult">
        select 
            p.id as productId,
            p.name as productName,
            p.price as price,
            p.image_url as imageUrl,
            pc.id as productCategoryId,
            pc.name as productCategoryName,
            ps.id as productStockId,
            ps.quantity as quantity
        from 
            product p
        join 
            product_category pc
        on
            p.product_category_id = pc.id
        join
            product_stock ps
        on  
            p.id = ps.product_id
        where
            delete_flag = 0
    </select>

    <update id="update" parameterType="prodResult">
        update 
            product set
               name=#{name},
               price=#{price},
               image_url=#{image}
               product_category_id=#{productCategoryId}
            where
               id=#{productId}
    </update>

    <select id="selectByProductId" resultMap="prodResult" parameterType="Integer">
        select
           p.id as productId, 
           p.name as productName,
           p.price as price,
           p.image_url as imageUrl,
           pc.name as productCategoryName,
           ps.quantity as quantity
        from
           product p
        join
           product_stock ps
        on
           p.id=ps.product_id
        join
           product_category pc
        on
           p.product_category_id=pc.id
        where
           p.id=#{productId}
        for update
        </select>
        

    <select id="selectByName" resultMap="prodResult">
        select 
            p.id as productId,
            p.name as productName,
            p.price as price,
            p.image_url as imageUrl 
        from 
            product p
        where
            p.delete_flag = 0
        and
            p.name = #{productName}
    </select>
    <select id="selectByProductId" resultMap="prodResult">
        select 
            p.id as productId,
            p.name as productName,
            p.price as price,
            p.image_url as imageUrl,
            pc.id as productCategoryId,
            pc.name as productCategoryName,
            ps.id as productStockId,
            ps.quantity as quantity
        from 
            product p
        join 
            product_category pc
        on
            p.product_category_id = pc.id
        join
            product_stock ps
        on  
            p.id = ps.product_id
        where
            delete_flag = 0
        and
            p.id = #{productId}
    </select>
    <select id="countAll" resultType="Integer">
        select 
            count(*) 
        from
            product
        <if test="productCategoryId != null">
            where
            product_category_id = #{productCategoryId}
        </if>
    </select>
    <select id="selectByPage" resultMap="prodResult" >
        select 
            p.id as productId,
            p.name as productName,
            p.price as price,
            p.image_url as imageUrl 
        from 
            product p
        <if test="param2 != null">
            where
            p.product_category_id = #{param2}
        </if>
        order by 
            p.id
        limit 
            #{param1.pageSize}
        offset 
            #{param1.offset}
    </select>  

    <insert id="insert" parameterType="Product">
        <selectKey keyProperty="productId" resultType="Integer" order="BEFORE">
            select nextval('product_id_seq')
        </selectKey>
            insert into product values(#{productId}, #{productName}, #{price}, #{imageUrl}, #{productCategory.productCategoryId}, 0)
    </insert>

    <update id="update" parameterType="Product">
        update product set name = #{productName}, price = #{price}, image_url =#{imageUrl}, category_id = #{productCategory.productCategoryId} where id = #{productId}
    </update>

    <update id="updateDeleteFlag" parameterType="Product">
        update product set delete_flag = 1 where id = #{productId}
    </update>

</mapper>